// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Open_Hours {
  id            String     @id
  barbershop_id String     @map("barbershop_id")
  barbershop    Barbershop @relation(fields: [barbershop_id], references: [id], onDelete: Cascade)
  day_week      Int
  open_time     DateTime   @db.Time()
  close_time    DateTime   @db.Time()
  created_at    DateTime
  updated_at    DateTime

  @@index([barbershop_id])
  @@map("open_hours")
}

model Barbershop {
  id                String              @id
  name              String
  owner             User                @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id          String              @map("owner_id")
  street            String              @db.VarChar(100)
  number            String              @db.VarChar(40)
  city              String              @db.VarChar(120)
  phone             String?             @db.VarChar()
  created_at        DateTime
  updated_at        DateTime
  members           Member[]
  open_hours        Open_Hours[]
  Attendance        Attendance[]
  BarbershopService BarbershopService[]

  @@index([owner_id])
  @@map("barbershops")
}

model Services {
  id                  String               @id
  name                String               @db.VarChar()
  created_at          DateTime
  updated_at          DateTime
  attendance_services AttendanceServices[]
  BarbershopService   BarbershopService[]

  @@map("services")
}

model BarbershopService {
  id            String       @id
  barbershop    Barbershop   @relation(fields: [barbershop_id], references: [id], onDelete: Cascade)
  barbershop_id String
  service       Services     @relation(fields: [service_id], references: [id])
  service_id    String
  duration      Int // Exemplo: duração do serviço em minutos
  price         Float // Preço personalizado para essa barbearia
  created_at    DateTime
  updated_at    DateTime
  Promotions    Promotions[]

  @@unique([barbershop_id, service_id])
  @@index([barbershop_id])
  @@index([service_id])
  @@map("barbershop_services")
}

model Promotions {
  id                    String            @id
  barbershop_service    BarbershopService @relation(fields: [barbershop_service_id], references: [id], onDelete: Cascade)
  barbershop_service_id String
  discount_amount       Float
  status                String            @db.VarChar()

  @@index([barbershop_service_id])
  @@map("promotions")
}

model Attendance {
  id                   String               @id @default(uuid())
  barbershop           Barbershop           @relation(fields: [barbershop_id], references: [id], onDelete: Cascade)
  barbershop_id        String
  barber_attendance_id String
  barber_attendance    User                 @relation(fields: [barber_attendance_id], references: [id], onDelete: Cascade)
  status               String               @db.VarChar()
  services             AttendanceServices[]
  created_at           DateTime
  updated_at           DateTime
  Scheduling           Scheduling?

  @@index([barbershop_id])
  @@index([barber_attendance_id])
  @@map("attendances")
}

enum Attendance_Status {
  ATIVO
  REAGENDADO
  AGENDADO
  FINALIZADO
}

model Scheduling {
  id            String     @id
  attendance    Attendance @relation(fields: [attendance_id], references: [id], onDelete: Cascade)
  attendance_id String     @unique
  scheduled_at  DateTime
  created_at    DateTime
  updated_at    DateTime

  @@map("scheduling")
}

model AttendanceServices {
  attendance    Attendance @relation(fields: [attendance_id], references: [id], onDelete: Cascade)
  attendance_id String
  service       Services   @relation(fields: [service_id], references: [id], onDelete: Cascade)
  service_id    String
  created_at    DateTime
  updated_at    DateTime

  @@id([attendance_id, service_id])
  @@index([attendance_id])
  @@index([service_id])
  @@map("attendance_services")
}

model User {
  id          String       @id
  name        String
  email       String       @unique
  password    String       @db.VarChar(50)
  role        Role         @default(CLIENT)
  phone       String       @db.Char(11)
  status      String       @db.VarChar()
  created_at  DateTime
  updated_at  DateTime
  member_on   Member[]
  barbershops Barbershop[]
  Attendance  Attendance[]
}

enum Role {
  ADMIN
  BARBER
  CLIENT
}

model Member {
  id            String     @id
  role          Role       @default(BARBER)
  barbershop_id String     @map("barbershop_id")
  user_id       String     @map("user_id")
  created_at    DateTime
  updated_at    DateTime
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  barbershop    Barbershop @relation(fields: [barbershop_id], references: [id], onDelete: Cascade)

  @@unique([barbershop_id, user_id])
  @@index([barbershop_id])
  @@map("members")
}
